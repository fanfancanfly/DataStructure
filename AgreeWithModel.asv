%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%局外点符合模型的有多少%%%%%%%%%%%%%%%%%%%%%%%%%
%Consensus_Setx     原来的x局内点
%Consensus_Sety     原来的y局内点
%Maybe_outliersx    x局外点
%Maybe_outliersy    y局外点
%line_vec           直线的系数
%point_line_dis     点到直线的距离
function [Re_Consensus_Set2d,Re_Consensus_Set3d] = AgreeWithModel(Consensus_Setx,Consensus_Sety,Maybe_outliersx,Maybe_outliersy,line_vec,point_line_dis)
Consensus_Set_temx = Consensus_Setx;                %临时变量进行保存
Consensus_Set_temy = Consensus_Sety;
[m,n] = size(Maybe_outliersx);
for i=1:n
    distem = abs(line_vec(1,1)*Maybe_outliersx(1,i)+line_vec(1,2)-May)
end

for i=1:m
    data3dtem = ones(1,4);
    data3dtem(1,1:3) = Maybe_outliers3d(i,:);    
    tem = Proj_mat*data3dtem';                     %三维点投影向二维点
    data2d(i,:) = tem./(tem(3,1));                 %二维点进行归一化
end
data2d_uv = data2d(:,1:2);               %只需要前两列
for i=1:m                                %判断x和y方向的误差是否在误差范围内
    cha_x = abs(data2d_uv(i,1) - Maybe_outliers2d(i,1));
    cha_y = abs(data2d_uv(i,2) - Maybe_outliers2d(i,2));
    if ((cha_x < delta_x) && (cha_y < delta_y))
        Consensus_Set_tem2 = [Consensus_Set_tem2;Maybe_outliers2d(i,:)];
        Consensus_Set_tem3 = [Consensus_Set_tem3;Maybe_outliers3d(i,:)];
    end
end
Re_Consensus_Set2d = Consensus_Set_tem2;
Re_Consensus_Set3d = Consensus_Set_tem3;
